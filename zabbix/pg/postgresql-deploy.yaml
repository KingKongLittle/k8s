# Namespace para archivar configuraciones

apiVersion: v1
kind: Namespace
metadata:
  name: zabbix
---  
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-postgresql-configmap
  labels:
    app: zabbix
    tier: database
data:
  pg_hba.conf: |
    # Configuration file generated by configmap from Kubernetes
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            trust
    # IPv6 local connections:
    host    all             all             ::1/128                 trust
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    #local   replication     admpostgres                                trust
    #host    replication     admpostgres        127.0.0.1/32            trust
    #host    replication     admpostgres        ::1/128                 trust

    host all all all md5
    
---
#apiVersion: v1
#kind: PersistentVolume
## Volumen fisico en el host que almacena datos persistentes
#metadata:
#  name: pgsql-pv-data
#  labels:
#    type: local
#spec:
#  # Vincular el PV al PVC específico para que solo pueda ser reclamado por este
#  claimRef:
#    name: pgsql-pv-data-claim
#    namespace: zabbix
#  capacity:
#    storage: 5Gi
#  accessModes:
#    - ReadWriteOnce
#  hostPath:
#    path: "/mnt/srv/postgresql-db/disk/var/lib/postgresql/data"
---
---
apiVersion: v1
kind: PersistentVolumeClaim
# Solicitud de PV, con las características que se indican en "spec:"
metadata:
  name: pgsql-pv-data-claim
  namespace: zabbix
spec:
  #volumeName: pgsql-pv-data
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: k8s-storageclass

# Volumes flux: Pod -> PVC -> PV -> Host machine
---
apiVersion: v1
kind: PersistentVolume
# Volumen fisico en el host que almacena datos persistentes
metadata:
  name: pgsql-pv-templatesdb
  labels:
    type: local
spec:
  # Vincular el PV al PVC específico para que solo pueda ser reclamado por este
  claimRef:
    name: pgsql-pv-templatesdb-claim
    namespace: zabbix
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/srv/postgresql-db/disk/config"

---

---
apiVersion: v1
kind: PersistentVolumeClaim
# Solicitud de PV, con las características que se indican en "spec:"
metadata:
  name: pgsql-pv-templatesdb-claim
spec:
  volumeName: pgsql-pv-templatesdb
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

# Volumes flux: Pod -> PVC -> PV -> Host machine
---
apiVersion: v1
kind: Secret
metadata:
  name: pgsql-secret-values
type: Opaque
# Usar "data:" si se van a pasar cadenas codificadas en base64
stringData:
  POSTGRES_USER: zabbix
  POSTGRES_PASSWORD: Secret*1313
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zabbix-db
spec:
  serviceName: zabbix-db
  selector:
    matchLabels:
      app: zabbix
      tier: database
  replicas: 1
  updateStrategy:
    type: RollingUpdate
    # Esto hace que se actualicen los pods con un numero ordinal mayor o igual que 0 (disponible solo para statefulsets)
    rollingUpdate:
      partition: 0
  template:
    metadata:
      labels:
        name: zabbix-db
        app: zabbix
        tier: database
    spec:
      containers:
        - name: zabbix-db
          image: postgres:13.4
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 400m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - name: pgport
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: pgport
            initialDelaySeconds: 80
            periodSeconds: 20
          # Configurar eventos del ciclo de vida del contenedor
          lifecycle: 
            postStart:
              exec:
                command: ['bash', '-c', '/config/init-zabbix-structure.sh']
          # Hacer referencia a secrets para importar variables
          env:
          - name: POSTGRES_DB
            value: zabbix
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: pgsql-secret-values
                key: POSTGRES_USER
          - name: POSTGRES_PASSWORD
            valueFrom:    
              secretKeyRef:
                name: pgsql-secret-values
                key: POSTGRES_PASSWORD
          # Crea el punto de montaje postgresql-data
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pgsql-data
              readOnly: false
            # Usar configmap para enviar archivos de configuración a los pods mediante un volumen (se pueden copiar automaticamente a data/ usando un pod custom con initContainer)
            - mountPath: /opt/custom-postgresql-conf
              name: custom-postgresql-conf
            # Mover script y volcado a esta ruta, para crear la estructura de zabbix DB
            - mountPath: /config
              name: pgsql-templatesdb

      # Asigna el PVC que hara referencia al punto de montaje en el contenedor
      volumes:
        - name: pgsql-data
          persistentVolumeClaim:
            claimName: pgsql-pv-data-claim
        - name: custom-postgresql-conf
          configMap:
            name: custom-postgresql-configmap
        - name: pgsql-templatesdb
          persistentVolumeClaim:
            claimName: pgsql-pv-templatesdb-claim
---
apiVersion: v1
kind: Service
metadata:
  name: zabbix-db-nodeport
  labels:
    app: zabbix
    tier: database
spec:
  type: NodePort
  selector:
    name: zabbix-db
  ports:
   - name: pgsqlport
     port: 5432
     targetPort: 5432
     nodePort: 30543
     protocol: TCP
---
---
apiVersion: v1
kind: Service
metadata:
  name: zabbix-db
  labels:
    app: zabbix
    tier: database
spec:
  type: ClusterIP
  selector:
    name: zabbix-db
  ports:
   - name: pgsqlport
     port: 5432
     targetPort: 5432
     protocol: TCP

